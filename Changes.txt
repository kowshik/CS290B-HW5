interface system.Computer :

	  /* Space uses this method to add a list of decompose tasks to the computer's local task queue.*/
	  void addDecomposeTasks(List<Task<?>> listOfTasks);

	  /* Space uses this method to add a list of compose tasks to the computer's local task queue.
	     The list of parameters passed has a 1-1 relation to the list of tasks.
	     parameters.size() will always be equal to listOfTasks.size() 
	  */
	  void addComposeTasks(List<Task<?>> listOfTasks, List<?> parameters);

	  /* Returns the size of the computer's queue at runtime*/
	  Integer getQueueSize();



interface system.Computer2Space :
	  
	  /* Registers a computer to the space.
	     computerId -> Hostname of the registering computer. Example : dudley, snoopy, marge etc.
	     		   This can be used to identify the computer when it returns results to the Space.
	  */
	  void register(Computer aComputer, String computerId, int numOfCores);

	  /* Pushes cached results to the Space.
	     computerId -> Same as above
	  */
	  void pushResults(String computerId, List<Result<?>> results);e



interface api.Task :

 	  /* New enum constants explaining if the task has been queued or not in the computer's local queue*/
	  enum QueueStatus{ QUEUED, NOT_QUEUED};

	  /* The Space uses this new method : Task.getQueueStatus() to figure out 
	     which tasks have to be assigned to other Computers in the cluster.
	  */
	  Task.QueueStatus getQueueStatus();
	  
	  /* The computer uses this method to set the queue status in subtasks before returning them to the space*/
	  void setQueueStatus(Task.QueueStatus newStatus);
	  
	 
	  
interface system.Client2Space :
	
	 /* The client specifies if the computers should be optimized for communication latency and if
	    the computers should use multiple worker threads. These values are passed as command-line arguments
	    through the ant command.
	 */ 
	  Result<?> compute(Task<?> task, Shared<?> shared, boolean commnOptimization, boolean workerThreads);

